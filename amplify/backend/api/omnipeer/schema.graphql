type Storage @model @auth(rules: [{ allow: owner, operations: [create, read] }]){
  cid: String! @primaryKey
  name: String!
  type: String!
  size: Int!
}

type User @model @auth(rules: [
  { allow: owner, operations: [create, read, update] },
  { allow: private, operations: [read] }
]
){
  owner: String! @primaryKey
  email: AWSEmail! @index(name: "byEmail", queryField: "userByEmail")
  peerId: String
  fullName: String
  about: String
  role: String
  nickname: String
  avatar: AWSURL
  chats: [Chat] @hasMany(indexName: "byUserId", fields: ["owner"])
  friends: [Friendship] @hasMany(indexName: "friendByUserId", fields: ["owner"])
  storage: [Storage] @hasMany
  streams: [Stream] @hasMany
}

type Chat 
@model (subscriptions: { level: public }) 
@auth(rules: 
  [
    { allow: owner, operations: [create, read, update], ownerField: "owners" },
  ]){
  id: ID! @primaryKey
  senderId: String!
  userId: String! @index(name: "byUserId", queryField: "chatsByUserId")
  unseenMsgs: Int!
  chat: [AWSJSON]
  owners: [String!]! 
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

type Friendship 
@model 
@auth(rules: 
  [
    { allow: owner, operations: [create, read, update], ownerField: "owners" }  
  ]
){
  id: ID! @primaryKey
  contactId: String! @index(name: "friendByUserId", queryField: "friendsByUserId")
  contact: User @belongsTo(fields: ["contactId"])
  status: FriendshipStatus!
  owners: [String!]!
}

enum StreamStatus {
  STARTED
  NOT_STARTED
  COMPLETED
  NOT_COMPLETED
}

type Stream @model @auth(rules: [{ allow: owner, operations: [create, read, update], ownerField: "owners" }]){
  id: ID! @primaryKey
  name: String!
  size: Int!
  status: StreamStatus!
  owners: [String!]!
}